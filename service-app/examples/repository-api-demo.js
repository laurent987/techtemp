/**
 * @file Demo - Repository API avec noms explicites
 * D√©montre l'utilisation de l'API Repository avec des noms de propri√©t√©s explicites
 */

import { createRepository } from '../src/repositories/index.js';
import Database from 'better-sqlite3';

// Cr√©ation d'une base de donn√©es en m√©moire pour la d√©mo
const db = new Database(':memory:');

// Cr√©er les tables (simplifi√© pour la d√©mo)
db.exec(`
  CREATE TABLE IF NOT EXISTS devices (
    device_id TEXT PRIMARY KEY,
    device_uid TEXT UNIQUE NOT NULL,
    label TEXT,
    model TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    last_seen_at DATETIME,
    offset_t REAL DEFAULT 0,
    offset_h REAL DEFAULT 0
  );

  CREATE TABLE IF NOT EXISTS rooms (
    room_id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    floor TEXT,
    side TEXT
  );

  CREATE TABLE IF NOT EXISTS readings_raw (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    device_id TEXT NOT NULL,
    room_id TEXT,
    ts DATETIME NOT NULL,
    t REAL,
    h REAL,
    source TEXT,
    msg_id TEXT,
    FOREIGN KEY (device_id) REFERENCES devices(device_id),
    FOREIGN KEY (room_id) REFERENCES rooms(room_id)
  );
`);

const repository = createRepository(db);

async function demo() {
  console.log('=== DEMO Repository API avec noms explicites ===\n');

  try {
    // 1. Cr√©er un device
    console.log('1. Cr√©ation d\'un device...');
    const device = await repository.devices.create({
      device_id: 'sensor001',
      device_uid: 'uid-sensor001',
      label: 'Capteur Temperature Salon'
    });
    console.log('‚úÖ Device cr√©√©:', device.device_id);

    // 2. Cr√©er une reading avec les NOUVEAUX noms explicites
    console.log('\n2. Cr√©ation d\'une reading avec noms explicites...');
    const reading1 = await repository.readings.create({
      device_id: 'sensor001',
      ts: new Date().toISOString(),
      temperature: 22.5,  // ‚Üê Nom explicite !
      humidity: 65        // ‚Üê Nom explicite !
    });
    console.log('‚úÖ Reading cr√©√©e avec noms explicites:', {
      success: reading1.success,
      temperature: '22.5¬∞C',
      humidity: '65%'
    });

    // 3. Cr√©er une reading avec les ANCIENS noms (r√©trocompatibilit√©)
    console.log('\n3. Cr√©ation d\'une reading avec anciens noms (compatibilit√©)...');
    const reading2 = await repository.readings.create({
      device_id: 'sensor001',
      ts: new Date(Date.now() + 1000).toISOString(),
      t: 23.1,  // ‚Üê Ancien nom encore support√©
      h: 68     // ‚Üê Ancien nom encore support√©
    });
    console.log('‚úÖ Reading cr√©√©e avec anciens noms:', {
      success: reading2.success,
      temperature: '23.1¬∞C',
      humidity: '68%'
    });

    // 4. R√©cup√©rer la derni√®re reading (avec transformation des noms)
    console.log('\n4. R√©cup√©ration de la derni√®re reading...');
    const latest = await repository.readings.getLatestByDevice('sensor001');
    console.log('‚úÖ Derni√®re reading avec noms explicites:');
    console.log(`   ‚Ä¢ Temperature: ${latest.temperature}¬∞C (au lieu de 't': ${latest.t})`);
    console.log(`   ‚Ä¢ Humidity: ${latest.humidity}% (au lieu de 'h': ${latest.h})`);
    console.log(`   ‚Ä¢ Timestamp: ${latest.ts}`);

    // 5. Test de validation avec noms explicites
    console.log('\n5. Test de validation avec temp√©rature invalide...');
    try {
      await repository.readings.create({
        device_id: 'sensor001',
        ts: new Date().toISOString(),
        temperature: 150  // ‚Üê Temp√©rature invalide
      });
    } catch (error) {
      console.log('‚úÖ Validation fonctionne:', error.message);
    }

    console.log('\nüéâ DEMO termin√©e avec succ√®s !');
    console.log('\nüìã R√âSUM√â des am√©liorations:');
    console.log('   ‚Ä¢ API Repository supporte maintenant "temperature" et "humidity"');
    console.log('   ‚Ä¢ R√©trocompatibilit√© avec "t" et "h" pr√©serv√©e');
    console.log('   ‚Ä¢ Toutes les m√©thodes de lecture transforment automatiquement les noms');
    console.log('   ‚Ä¢ Code plus lisible et explicite');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    db.close();
  }
}

demo();
